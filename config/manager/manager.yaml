apiVersion: v1
kind: Namespace
metadata:
  name: system
  labels:
    control-plane: controller-manager
    app.kubernetes.io/name: cluster-api-provider-latitudesh
    app.kubernetes.io/managed-by: kustomize
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: controller-manager
  namespace: system
  labels:
    control-plane: controller-manager
    app.kubernetes.io/name: cluster-api-provider-latitudesh
    app.kubernetes.io/managed-by: kustomize
spec:
  replicas: 1
  selector:
    matchLabels:
      control-plane: controller-manager
      app.kubernetes.io/name: cluster-api-provider-latitudesh
  template:
    metadata:
      labels:
        control-plane: controller-manager
        app.kubernetes.io/name: cluster-api-provider-latitudesh
      annotations:
        kubectl.kubernetes.io/default-container: manager
    spec:
      serviceAccountName: controller-manager
      terminationGracePeriodSeconds: 10
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: manager
          image: controller:latest        # kustomize will use $IMG
          imagePullPolicy: IfNotPresent
          command: ["/manager"]
          args:
            - --leader-elect
            - --health-probe-bind-address=:8081
          env:
            - name: LATITUDESH_BEARER
              valueFrom:
                secretKeyRef:
                  name: latitudesh-credentials
                  key: API_TOKEN
            - name: LATITUDESH_BASE_URL
              valueFrom:
                secretKeyRef:
                  name: latitudesh-credentials
                  key: BASE_URL
          ports:
            - name: healthz
              containerPort: 8081
              protocol: TCP
          livenessProbe:
            httpGet: { path: /healthz, port: 8081 }
            initialDelaySeconds: 15
            periodSeconds: 20
          readinessProbe:
            httpGet: { path: /readyz, port: 8081 }
            initialDelaySeconds: 5
            periodSeconds: 10
          resources:
            limits:   { cpu: 500m, memory: 128Mi }
            requests: { cpu: 10m,  memory: 64Mi }
          securityContext:
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            capabilities:
              drop: ["ALL"]
          volumeMounts: []
      volumes: []
